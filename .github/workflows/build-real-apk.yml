name: 📱 Build Real APK (auto-version)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Gradle Cache
        uses: actions/cache@v4
        with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
            restore-keys: |
              gradle-${{ runner.os }}-

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 🧱 Install Android SDK Packages (manual)
        shell: bash
        run: |
          set -e
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          ANDROID_HOME="$ANDROID_SDK_ROOT"
          export ANDROID_SDK_ROOT ANDROID_HOME
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          echo "⬇️ Descargando commandline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "Aceptando licencias"
          yes | sdkmanager --licenses > /dev/null 2>&1 || true
          echo "📦 Instalando platform-tools + API 34"
          if sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"; then
            echo "✅ API 34 instalada"
            echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
          else
            echo "⚠️ No se pudo instalar API 34. Fallback a API 33"
            sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"
            sed -i 's/compileSdk 34/compileSdk 33/' android-wrapper/app/build.gradle || true
            sed -i 's/targetSdk 34/targetSdk 33/' android-wrapper/app/build.gradle || true
            echo "$ANDROID_SDK_ROOT/build-tools/33.0.2" >> $GITHUB_PATH
          fi
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "✅ SDK listo"

      - name: 📦 Copy Web Assets into Android Wrapper
        run: |
          DATE=$(date +%Y%m%d)
            TIME=$(date +%H%M%S)
            SHORT_SHA=${GITHUB_SHA::7}
            # versionName legible y versionCode numérico (yy + dayOfYear + HHMM)
            APP_VERSION_NAME="$DATE-$TIME-$SHORT_SHA"
            APP_VERSION_CODE=$(date +%y%j%H%M)
            echo "Auto version -> name=$APP_VERSION_NAME code=$APP_VERSION_CODE"
          WRAPPER=android-wrapper/app/src/main/assets
          mkdir -p "$WRAPPER"
          shopt -s nullglob
          for f in *.html *.js *.css *.json; do
            [ -f "$f" ] && cp "$f" "$WRAPPER/"
          done
          if [ -d assets ]; then
            mkdir -p "$WRAPPER/assets"
            cp -r assets/* "$WRAPPER/assets/"
          fi
          # Export to env for later steps / Gradle
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV
          chmod +x android-wrapper/gradlew || true

      - name: 🔐 Generate Keystore (dev) (if no secret)
        id: keystore
        env:
          S_KEYSTORE_B64: ${{ secrets.APK_KEYSTORE_BASE64 }}
          S_KEY_ALIAS: ${{ secrets.APK_KEY_ALIAS }}
          S_STORE_PASS: ${{ secrets.APK_KEYSTORE_PASSWORD }}
          S_KEY_PASS: ${{ secrets.APK_KEY_PASSWORD }}
        run: |
          if [ -n "$S_KEYSTORE_B64" ]; then
            echo "🔐 Using provided keystore from secrets"
            echo "$S_KEYSTORE_B64" | base64 -d > release.keystore || { echo "❌ Error decoding keystore"; exit 1; }
            KEY_ALIAS=${S_KEY_ALIAS:-brunoVegaDevKey}
            STORE_PASS=${S_STORE_PASS:-changeme}
            KEY_PASS=${S_KEY_PASS:-$STORE_PASS}
            echo "KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
            echo "STORE_PASS=$STORE_PASS" >> $GITHUB_ENV
            echo "KEY_PASS=$KEY_PASS" >> $GITHUB_ENV
          else
            echo "⚠️ No keystore secret found. Generating dev keystore"
            keytool -genkey -noprompt -v \
              -keystore release.keystore \
              -alias brunoVegaDevKey \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass devBrunoVega123 \
              -keypass devBrunoVega123 \
              -dname "CN=Bruno y Vega, OU=Dev, O=BrunoVega, L=Madrid, ST=Madrid, C=ES"
            echo "KEY_ALIAS=brunoVegaDevKey" >> $GITHUB_ENV
            echo "STORE_PASS=devBrunoVega123" >> $GITHUB_ENV
            echo "KEY_PASS=devBrunoVega123" >> $GITHUB_ENV
          fi

      - name: 🛠️ Build Release APK (Gradle Action)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.9
          build-root-directory: android-wrapper
          arguments: assembleRelease --no-daemon -x test
        env:
          APP_VERSION_NAME: ${{ env.APP_VERSION_NAME }}
          APP_VERSION_CODE: ${{ env.APP_VERSION_CODE }}

      - name: 🔎 List APK Outputs
        run: |
          ls -R android-wrapper/app/build/outputs/apk || true

      - name: ✍️ Sign & Align APK
        run: |
          UNSIGNED=android-wrapper/app/build/outputs/apk/release/app-release-unsigned.apk
          ALIGNED=app-release-aligned.apk
          SIGNED=Bruno_y_Vega_signed.apk

          if [ ! -f "$UNSIGNED" ]; then echo "❌ APK unsigned no encontrado"; exit 1; fi
          # zipalign y apksigner deberían estar en build-tools instalados anteriormente
          if ! command -v zipalign >/dev/null 2>&1; then
            echo "⚠️ zipalign no encontrado en PATH, intentando localizarlo"
            ZIPALIGN_PATH=$(find "$ANDROID_SDK_ROOT" -type f -name zipalign | head -n1 || true)
            if [ -n "$ZIPALIGN_PATH" ]; then
              echo "Usando $ZIPALIGN_PATH"; chmod +x "$ZIPALIGN_PATH"; "$ZIPALIGN_PATH" -p 4 "$UNSIGNED" "$ALIGNED"
            else
              echo "⚠️ No se encontró zipalign, copiando directo"; cp "$UNSIGNED" "$ALIGNED"
            fi
          else
            zipalign -p 4 "$UNSIGNED" "$ALIGNED"
          fi

          if ! command -v apksigner >/dev/null 2>&1; then
            echo "⚠️ apksigner no encontrado en PATH, buscando..."
            APKSIGNER_PATH=$(find "$ANDROID_SDK_ROOT" -type f -name apksigner | head -n1 || true)
            if [ -n "$APKSIGNER_PATH" ]; then
              echo "Usando $APKSIGNER_PATH"; chmod +x "$APKSIGNER_PATH"
              "$APKSIGNER_PATH" sign \
                --ks release.keystore \
                --ks-pass pass:$STORE_PASS \
                --key-pass pass:$KEY_PASS \
                --out "$SIGNED" \
                "$ALIGNED"
              "$APKSIGNER_PATH" verify --verbose "$SIGNED" || true
            else
              echo "⚠️ No apksigner -> fallback jarsigner"
              jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
                -keystore release.keystore \
                -storepass $STORE_PASS -keypass $KEY_PASS \
                "$ALIGNED" $KEY_ALIAS
              cp "$ALIGNED" "$SIGNED"
            fi
          else
            apksigner sign \
              --ks release.keystore \
              --ks-pass pass:$STORE_PASS \
              --key-pass pass:$KEY_PASS \
              --out "$SIGNED" \
              "$ALIGNED"
            apksigner verify --verbose "$SIGNED" || true
          fi

          mkdir -p android-apk/releases/latest
          cp "$SIGNED" android-apk/releases/latest/Bruno_y_Vega_latest_signed.apk

      - name: 📤 Upload Signed APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bruno-vega-latest-signed-real
          path: android-apk/releases/latest/Bruno_y_Vega_latest_signed.apk
          retention-days: 30

      - name: 📝 Summary
        run: |
          echo "## ✅ APK real generada" >> $GITHUB_STEP_SUMMARY
          echo "- versionName: $APP_VERSION_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- versionCode: $APP_VERSION_CODE" >> $GITHUB_STEP_SUMMARY
          echo "- Keystore alias: $KEY_ALIAS" >> $GITHUB_STEP_SUMMARY
          echo "- Archivo: Bruno_y_Vega_latest_signed.apk" >> $GITHUB_STEP_SUMMARY
          echo "- Instalación: Habilita orígenes desconocidos y abre la APK" >> $GITHUB_STEP_SUMMARY

      - name: 🚀 Commit APK (opcional)
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git add android-apk/releases/latest/Bruno_y_Vega_latest_signed.apk || true
          git commit -m "📱 APK real firmada auto-version $APP_VERSION_NAME" || exit 0
          git push || true
