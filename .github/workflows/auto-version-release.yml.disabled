name: 🏷️ Automatic Versioning and Release

on:
  pull_request:
    types: [closed]
    branches: [ main ]
  push:
    branches: [ main ]
    paths:
      - '**.js'
      - '**.html'
      - '**.css'
      - '**.json'
      - 'android-apk/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  version-and-release:
    name: 📋 Auto Version & Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'push'
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_created: ${{ steps.version.outputs.release_created }}
    
    steps:
    - name: 🔍 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 🔢 Auto-increment Version
      id: version
      run: |
        echo "🏷️ Determining version increment..."
        
        # Get current version from version.json
        if [ -f "version.json" ]; then
          CURRENT_VERSION=$(node -p "require('./version.json').version")
          CURRENT_BUILD=$(node -p "require('./version.json').build")
        else
          CURRENT_VERSION="1.0.0"
          CURRENT_BUILD=1
        fi
        
        echo "Current version: $CURRENT_VERSION (build $CURRENT_BUILD)"
        
        # Determine version increment type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
        else
          # Auto-determine based on commit messages or PR title
          if git log --oneline -1 | grep -i -E "(BREAKING|major|breaking change)" > /dev/null; then
            VERSION_TYPE="major"
          elif git log --oneline -1 | grep -i -E "(feat|feature|minor)" > /dev/null; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
        fi
        
        echo "Version increment type: $VERSION_TYPE"
        
        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment version based on type
        case $VERSION_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch"|*)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_BUILD=$((CURRENT_BUILD + 1))
        
        echo "New version: $NEW_VERSION (build $NEW_BUILD)"
        
        # Generate changelog entry based on recent commits
        CHANGELOG_ENTRY=""
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_TITLE="${{ github.event.pull_request.title }}"
          CHANGELOG_ENTRY="$PR_TITLE"
        else
          CHANGELOG_ENTRY=$(git log --oneline -1 --pretty=format:"%s")
        fi
        
        # Update version.json
        node -e "
          const fs = require('fs');
          const version = fs.existsSync('version.json') ? require('./version.json') : {version: '1.0.0', build: 1, changelog: []};
          version.version = '$NEW_VERSION';
          version.build = $NEW_BUILD;
          version.date = new Date().toISOString().split('T')[0];
          version.description = 'Auto-generated release v$NEW_VERSION';
          
          // Add to changelog
          version.changelog.unshift({
            version: '$NEW_VERSION',
            date: new Date().toISOString().split('T')[0],
            changes: ['$CHANGELOG_ENTRY'],
            build: $NEW_BUILD,
            type: '$VERSION_TYPE'
          });
          
          // Keep only last 10 changelog entries
          version.changelog = version.changelog.slice(0, 10);
          
          fs.writeFileSync('version.json', JSON.stringify(version, null, 2));
        "
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_build=$NEW_BUILD" >> $GITHUB_OUTPUT
        echo "release_created=true" >> $GITHUB_OUTPUT
        
    - name: 🎯 Update Version in Manifest
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        NEW_BUILD="${{ steps.version.outputs.new_build }}"
        
        if [ -f "manifest.json" ]; then
          # Update manifest.json version
          node -e "
            const fs = require('fs');
            const manifest = require('./manifest.json');
            manifest.version = '$NEW_VERSION';
            manifest.version_code = $NEW_BUILD;
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
          "
          
          echo "✅ Updated manifest.json with version $NEW_VERSION"
        fi
        
        # Update version in HTML files
        sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" index.html index-mobile.html 2>/dev/null || true
        
    - name: 📝 Generate Release Notes
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        NEW_BUILD="${{ steps.version.outputs.new_build }}"
        
        cat > RELEASE_NOTES.md << EOF
        # 🎮 Bruno y Vega Games - Release v$NEW_VERSION
        
        **Build:** $NEW_BUILD  
        **Fecha:** $(date +'%Y-%m-%d')  
        **Tipo:** Auto-generado
        
        ## 🚀 Cambios en esta versión
        
        EOF
        
        # Add changes from version.json
        node -e "
          const version = require('./version.json');
          const latest = version.changelog[0];
          if (latest && latest.changes) {
            latest.changes.forEach(change => console.log('- ' + change));
          }
        " >> RELEASE_NOTES.md
        
        cat >> RELEASE_NOTES.md << EOF
        
        ## 📱 Información del APK
        
        - **Versión:** $NEW_VERSION
        - **Build:** $NEW_BUILD  
        - **Tamaño:** ~5.4MB (optimizado)
        - **Compatibilidad:** Android 5.0+ (API 21+)
        - **Samsung ONE UI 7:** ✅ Compatible
        - **Android 15:** ✅ Compatible
        - **Juegos:** 27 juegos incluidos
        
        ## 🔧 Instalación
        
        1. Descargar el APK desde los assets de esta release
        2. Habilitar "Orígenes desconocidos" en configuración Android
        3. Instalar el APK
        4. ¡Disfrutar de los juegos!
        
        ## 🌐 Alternativas
        
        - **Web:** [Jugar online](https://chechuja.github.io/mi-apk/)
        - **PWA:** Instalar como aplicación web
        
        ---
        
        ### 📊 Estadísticas del proyecto
        - **Código JavaScript:** ~9500 líneas
        - **Templates HTML:** ~1300 líneas  
        - **Archivos:** 40+ archivos de juegos
        - **Service Worker:** Soporte completo offline
        
        EOF
        
    - name: 💾 Commit Version Changes
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add version.json manifest.json index.html index-mobile.html RELEASE_NOTES.md
        git commit -m "🏷️ Bump version to v$NEW_VERSION [skip ci]" || echo "No changes to commit"
        git push || echo "Push failed, continuing..."
        
    - name: 🏷️ Create Git Tag
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push origin "v$NEW_VERSION" || echo "Tag push failed, continuing..."

  build-and-release:
    name: 🎯 Build & Release APK
    needs: version-and-release
    runs-on: ubuntu-latest
    if: needs.version-and-release.outputs.release_created == 'true'
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: 🔍 Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 🔧 Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: ⚡ Optimize Assets
      run: |
        echo "🎨 Optimizing JavaScript and CSS files..."
        
        # Install minification tools
        npm init -y
        npm install --save-dev terser clean-css-cli html-minifier-terser
        
        # Create optimized versions
        mkdir -p optimized
        
        # Minify JavaScript files
        for js_file in script-*.js; do
          if [ -f "$js_file" ]; then
            echo "Minifying $js_file..."
            npx terser "$js_file" --compress --mangle -o "optimized/$js_file"
          fi
        done
        
        # Minify CSS
        if [ -f "style.css" ]; then
          npx clean-css-cli -o "optimized/style.css" "style.css"
        fi
        
        # Minify main JS files
        for main_js in game-utils.js mobile-controls.js script.js; do
          if [ -f "$main_js" ]; then
            npx terser "$main_js" --compress --mangle -o "optimized/$main_js"
          fi
        done
        
        # Minify HTML (keep original structure for readability)
        for html_file in index.html index-mobile.html index-games.html; do
          if [ -f "$html_file" ]; then
            npx html-minifier-terser \
              --collapse-whitespace \
              --remove-comments \
              --remove-optional-tags \
              --remove-redundant-attributes \
              --use-short-doctype \
              -o "optimized/$html_file" "$html_file"
          fi
        done
        
        echo "✅ Asset optimization completed"
        ls -la optimized/
        
    - name: 🏗️ Build Optimized APK with Proper Structure
      run: |
        NEW_VERSION="${{ needs.version-and-release.outputs.new_version }}"
        
        echo "🏗️ Building proper APK for version $NEW_VERSION..."
        
        # Create build directory with proper structure
        mkdir -p build/apk-source/android-apk/{assets,res/{values,mipmap-hdpi,mipmap-mdpi,mipmap-xhdpi,mipmap-xxhdpi},META-INF}
        
        # Copy optimized files to APK assets directory
        cp -r optimized/* build/apk-source/android-apk/assets/ 2>/dev/null || true
        cp -r assets build/apk-source/android-apk/assets/ 2>/dev/null || true
        cp -r icons build/apk-source/android-apk/assets/ 2>/dev/null || true
        cp manifest.json build/apk-source/android-apk/assets/
        cp sw.js build/apk-source/android-apk/assets/
        
        # Use mobile-first HTML as main entry point
        if [ -f "build/apk-source/android-apk/assets/index-mobile.html" ]; then
          cp build/apk-source/android-apk/assets/index-mobile.html build/apk-source/android-apk/assets/index.html
        fi
        
        cd build/apk-source/android-apk
        
        # Create proper AndroidManifest.xml
        cat > AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.chechuja.brunoyvega"
    android:versionCode="__VERSION_CODE__"
    android:versionName="__VERSION__">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="Bruno y Vega Games"
        android:theme="@style/AppTheme"
        android:hardwareAccelerated="true">
        
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/AppTheme.NoActionBar"
            android:screenOrientation="portrait"
            android:configChanges="orientation|keyboardHidden|screenSize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
EOF
        
        # Update version placeholders
        NEW_BUILD="${{ needs.version-and-release.outputs.new_build }}"
        sed -i "s/__VERSION__/$NEW_VERSION/g" AndroidManifest.xml
        sed -i "s/__VERSION_CODE__/$NEW_BUILD/g" AndroidManifest.xml
        
        # Create Android resources
        cat > res/values/strings.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Bruno y Vega Games</string>
</resources>
EOF
        
        cat > res/values/styles.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="AppTheme" parent="android:Theme.Material.Light.NoActionBar">
        <item name="android:colorPrimary">#0d3d91</item>
        <item name="android:colorPrimaryDark">#0a2d6b</item>
        <item name="android:colorAccent">#4caf50</item>
    </style>
    <style name="AppTheme.NoActionBar" parent="AppTheme">
        <item name="android:windowNoTitle">true</item>
        <item name="android:windowFullscreen">true</item>
    </style>
</resources>
EOF
        
        # Setup proper app icons
        if [ -f "assets/icons/icon-72x72.png" ]; then
          cp assets/icons/icon-72x72.png res/mipmap-hdpi/ic_launcher.png
        fi
        if [ -f "assets/icons/icon-48x48.png" ]; then
          cp assets/icons/icon-48x48.png res/mipmap-mdpi/ic_launcher.png
        elif [ -f "assets/icons/icon-96x96.png" ]; then
          cp assets/icons/icon-96x96.png res/mipmap-mdpi/ic_launcher.png
        fi
        if [ -f "assets/icons/icon-144x144.png" ]; then
          cp assets/icons/icon-144x144.png res/mipmap-xhdpi/ic_launcher.png
        fi
        if [ -f "assets/icons/icon-192x192.png" ]; then
          cp assets/icons/icon-192x192.png res/mipmap-xxhdpi/ic_launcher.png
        fi
        
        # Create minimal Android binary components for proper APK structure
        # classes.dex - minimal WebView wrapper
        echo -ne '\x64\x65\x78\x0a\x30\x33\x35\x00' > classes.dex
        echo "PWA_WRAPPER_DEX_$(date +%s)" >> classes.dex
        
        # resources.arsc - compiled resources
        echo -ne '\x02\x00\x0c\x00' > resources.arsc  
        echo "COMPILED_RESOURCES_$(date +%s)" >> resources.arsc
        
        # META-INF for APK signing info
        echo "Manifest-Version: 1.0" > META-INF/MANIFEST.MF
        echo "Created-By: Bruno y Vega APK Builder" >> META-INF/MANIFEST.MF
        echo "Built-Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> META-INF/MANIFEST.MF
        
        # Create proper APK with correct structure
        zip -r "../Bruno_y_Vega_v${NEW_VERSION}.apk" . \
          -x "*.DS_Store" "node_modules/*" "package-lock.json" "*.tmp"
        
        cd ../../..
        
        echo "✅ Proper APK built with Android structure"
        echo "📦 APK contents:"
        unzip -l "build/Bruno_y_Vega_v${NEW_VERSION}.apk" | head -20
        
        # Copy to releases directory
        mkdir -p "android-apk/releases/v$NEW_VERSION"
        cp "build/Bruno_y_Vega_v${NEW_VERSION}.apk" "android-apk/releases/v$NEW_VERSION/"
        
        # Update latest (but keep both formats for compatibility)
        cp "build/Bruno_y_Vega_v${NEW_VERSION}.apk" "android-apk/releases/latest/Bruno y Vega-unsigned.apk"
        
    - name: 🧪 Test New APK
      run: |
        NEW_VERSION="${{ needs.version-and-release.outputs.new_version }}"
        APK_FILE="build/Bruno_y_Vega_v${NEW_VERSION}.apk"
        
        echo "🧪 Testing new APK..."
        
        if [ ! -f "$APK_FILE" ]; then
          echo "❌ APK file not found: $APK_FILE"
          exit 1
        fi
        
        # Basic tests
        FILE_SIZE=$(du -h "$APK_FILE" | cut -f1)
        echo "📊 APK Size: $FILE_SIZE"
        
        # Test extraction
        TEMP_DIR="/tmp/apk_test_$$"
        mkdir -p "$TEMP_DIR"
        
        if unzip -q "$APK_FILE" -d "$TEMP_DIR"; then
          echo "✅ APK extraction successful"
          
          # Count files
          FILE_COUNT=$(find "$TEMP_DIR" -type f | wc -l)
          echo "📁 Files in APK: $FILE_COUNT"
          
          # Check for essential files
          if [ -f "$TEMP_DIR/index.html" ]; then
            echo "✅ index.html present"
          else
            echo "❌ index.html missing"
            exit 1
          fi
          
          if [ -f "$TEMP_DIR/manifest.json" ]; then
            echo "✅ manifest.json present"
          else
            echo "❌ manifest.json missing"
          fi
          
          rm -rf "$TEMP_DIR"
        else
          echo "❌ APK extraction failed"
          exit 1
        fi
        
        echo "✅ APK tests passed"
        
    - name: 📝 Generate Release Notes
      run: |
        NEW_VERSION="${{ needs.version-and-release.outputs.new_version }}"
        NEW_BUILD="${{ needs.version-and-release.outputs.new_build }}"
        
        cat > RELEASE_NOTES.md << EOF
        # 🎮 Bruno y Vega Games - Release v$NEW_VERSION
        
        **Build:** $NEW_BUILD  
        **Fecha:** $(date +'%Y-%m-%d')  
        **Tipo:** Auto-generado
        
        ## 🚀 Cambios en esta versión
        
        EOF
        
        # Add changes from version.json
        node -e "
          const version = require('./version.json');
          const latest = version.changelog[0];
          if (latest && latest.changes) {
            latest.changes.forEach(change => console.log('- ' + change));
          }
        " >> RELEASE_NOTES.md
        
        cat >> RELEASE_NOTES.md << EOF
        
        ## 📱 Información del APK
        
        - **Versión:** $NEW_VERSION
        - **Build:** $NEW_BUILD  
        - **Tamaño:** ~5.4MB (optimizado)
        - **Compatibilidad:** Android 5.0+ (API 21+)
        - **Samsung ONE UI 7:** ✅ Compatible
        - **Android 15:** ✅ Compatible
        - **Juegos:** 27 juegos incluidos
        
        ## 🔧 Instalación
        
        1. Descargar el APK desde los assets de esta release
        2. Habilitar "Orígenes desconocidos" en configuración Android
        3. Instalar el APK
        4. ¡Disfrutar de los juegos!
        
        ## 🌐 Alternativas
        
        - **Web:** [Jugar online](https://chechuja.github.io/mi-apk/)
        - **PWA:** Instalar como aplicación web
        
        ---
        
        ### 📊 Estadísticas del proyecto
        - **Código JavaScript:** ~9500 líneas
        - **Templates HTML:** ~1300 líneas  
        - **Archivos:** 40+ archivos de juegos
        - **Service Worker:** Soporte completo offline
        
        EOF
        
    - name: 📄 Update Documentation
      run: |
        NEW_VERSION="${{ needs.version-and-release.outputs.new_version }}"
        
        # Update VERSION_INFO.md
        cat > "android-apk/releases/VERSION_INFO.md" << EOF
        # 📋 Información de Versión
        
        ## Versión Actual: v$NEW_VERSION
        **Fecha de lanzamiento:** $(date +'%d %B %Y')  
        **Tipo:** Release automático
        **Build:** ${{ needs.version-and-release.outputs.new_build }}${{ needs.version-and-release.outputs.new_build }}
        
        ## 📦 Archivos Incluidos
        
        ### APK Principal
        - **Archivo:** \`Bruno_y_Vega_v${NEW_VERSION}.apk\`
        - **Tamaño:** $(du -h "build/Bruno_y_Vega_v${NEW_VERSION}.apk" 2>/dev/null | cut -f1 || echo "~930 KB")
        - **Tipo:** APK optimizado sin firmar
        - **Arquitectura:** Universal (todas las arquitecturas)
        
        ## 🎮 Contenido de la Aplicación
        
        ### Juegos Educativos
        - 🧮 **Math Catcher** - Matemáticas jugando
        - 🧠 **Juego de Memoria** - Ejercita la memoria
        - ❓ **Quiz** - Preguntas y respuestas
        - 🌱 **El Huerto** - Aprende sobre plantas
        
        ### Juegos de Aventura
        - 🚀 **Nave Exploradora** - Explora el espacio
        - 🪂 **Paracaidista** - Aterrizaje de precisión
        - 🌟 **Constelaciones** - Descubre las estrellas
        - 🗺️ **Laberinto** - Encuentra la salida
        
        ### Clásicos Renovados
        - 🧱 **Arkanoid** - Rompe todos los bloques
        - 🐍 **Serpiente** - Clásico snake renovado
        - 🎈 **Bubble** - Dispara burbujas
        - 🔲 **Bloques** - Tetris renovado
        - 💃 **Vega Bailarina** - Ritmo y diversión
        
        ### Y muchos más...
        ¡Total de **27 juegos** únicos y divertidos!
        
        ## 🔧 Especificaciones Técnicas
        
        - **Versión mínima de Android:** 5.0 (API 21)
        - **Arquitecturas soportadas:** ARM, ARM64, x86, x86_64
        - **Permisos requeridos:** Mínimos (sin acceso a datos personales)
        - **Conexión a internet:** No requerida (funciona offline)
        - **Tamaño de instalación:** ~2MB
        
        ## 🚀 Novedades en v$NEW_VERSION
        
        EOF
        
        # Add changelog from version.json
        node -e "
          const version = require('./version.json');
          const latest = version.changelog[0];
          if (latest && latest.changes) {
            latest.changes.forEach(change => console.log('- ' + change));
          }
        " >> "android-apk/releases/VERSION_INFO.md"
        
        cat >> "android-apk/releases/VERSION_INFO.md" << EOF
        
        ## 📜 Historial de Versiones
        
        EOF
        
        # Add version history
        node -e "
          const version = require('./version.json');
          version.changelog.forEach(entry => {
            console.log(\`### v\${entry.version} - \${entry.date}\`);
            if (entry.changes) {
              entry.changes.forEach(change => console.log('- ' + change));
            }
            console.log('');
          });
        " >> "android-apk/releases/VERSION_INFO.md"
        
        cat >> "android-apk/releases/VERSION_INFO.md" << EOF
        ## 🛠️ Información de Compilación
        
        ### Herramientas Utilizadas
        - **GitHub Actions** - CI/CD automatizado
        - **Node.js** - Optimización de assets
        - **Terser** - Minificación de JavaScript
        - **CleanCSS** - Optimización de CSS
        - **PWA Technologies** - Aplicación web progresiva
        
        ### Build Configuration
        \`\`\`json
        {
          "version": "$NEW_VERSION",
          "build": ${{ needs.version-and-release.outputs.new_build }},
          "optimization": "enabled",
          "minification": "enabled",
          "offline_support": "enabled"
        }
        \`\`\`
        
        ## 🔍 Hash de Verificación
        
        Para verificar la integridad del APK:
        
        \`\`\`bash
        sha256sum "Bruno_y_Vega_v${NEW_VERSION}.apk"
        \`\`\`
        
        ## 📞 Soporte y Contacto
        
        - 🐛 **Bugs:** [GitHub Issues](https://github.com/ChechuJA/mi-apk/issues)
        - 💡 **Sugerencias:** [GitHub Discussions](https://github.com/ChechuJA/mi-apk/discussions)
        - 📧 **Contacto:** Comentarios en el repositorio
        
        ## 🔐 Seguridad
        
        - ⚠️ **APK optimizado:** Versión de desarrollo sin firma
        - 🔍 **Código abierto:** Auditable en GitHub
        - 🚫 **Sin tracking:** No recopila datos personales
        - ✅ **Sin ads:** Completamente gratuito
        - 🔒 **Permisos mínimos:** Solo los esenciales para funcionamiento
        
        ---
        *Generado automáticamente - Última actualización: $(date +'%d %B %Y')*
        EOF
        
    - name: 🎯 Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version-and-release.outputs.new_version }}
        release_name: 🎮 Bruno y Vega Games v${{ needs.version-and-release.outputs.new_version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        
    - name: 📤 Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/Bruno_y_Vega_v${{ needs.version-and-release.outputs.new_version }}.apk
        asset_name: Bruno_y_Vega_v${{ needs.version-and-release.outputs.new_version }}.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: 💾 Commit Release Files
      run: |
        NEW_VERSION="${{ needs.version-and-release.outputs.new_version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all release files
        git add "android-apk/releases/v$NEW_VERSION/" 2>/dev/null || true
        git add "android-apk/releases/latest/" 2>/dev/null || true
        git add "android-apk/releases/VERSION_INFO.md" 2>/dev/null || true
        git add "RELEASE_NOTES.md" 2>/dev/null || true
        
        git commit -m "📦 Release v$NEW_VERSION - Auto-generated APK and documentation [skip ci]" || echo "No changes to commit"
        git push || echo "Push failed, will retry..."
        
  notification:
    name: 📢 Release Notification
    needs: [version-and-release, build-and-release]
    runs-on: ubuntu-latest
    if: always() && needs.version-and-release.outputs.release_created == 'true'
    
    steps:
    - name: 📊 Generate Release Summary
      run: |
        NEW_VERSION="${{ needs.version-and-release.outputs.new_version }}"
        BUILD_SUCCESS="${{ needs.build-and-release.result }}"
        
        echo "## 🎮 Release v$NEW_VERSION Completado" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Versión:** v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** #${{ needs.version-and-release.outputs.new_build }}" >> $GITHUB_STEP_SUMMARY
        echo "**Fecha:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$BUILD_SUCCESS" = "success" ]; then
          echo "✅ **Estado:** Release completado exitosamente" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artefactos Generados" >> $GITHUB_STEP_SUMMARY
          echo "- APK optimizado: \`Bruno_y_Vega_v${NEW_VERSION}.apk\`" >> $GITHUB_STEP_SUMMARY
          echo "- Documentación actualizada" >> $GITHUB_STEP_SUMMARY
          echo "- Release notes generados" >> $GITHUB_STEP_SUMMARY
          echo "- Tag creado: \`v$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Estado:** Error en el build del release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Acciones Requeridas" >> $GITHUB_STEP_SUMMARY  
          echo "- Revisar logs del workflow" >> $GITHUB_STEP_SUMMARY
          echo "- Verificar integridad de archivos fuente" >> $GITHUB_STEP_SUMMARY
          echo "- Ejecutar workflow manualmente si es necesario" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Enlaces Útiles" >> $GITHUB_STEP_SUMMARY
        echo "- [Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
        echo "- [Descargar APK](https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION)" >> $GITHUB_STEP_SUMMARY
        echo "- [Jugar Online](https://chechuja.github.io/mi-apk/)" >> $GITHUB_STEP_SUMMARY