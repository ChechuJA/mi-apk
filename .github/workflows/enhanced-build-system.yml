name: üèóÔ∏è Enhanced Build System

on:
  push:
    branches: [ main ]
    paths:
      - '**.js'
      - '**.html'
      - '**.css'
      - 'assets/**'
      - 'icons/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.js'
      - '**.html'
      - '**.css'
      - 'assets/**'
      - 'icons/**'
  workflow_dispatch:
    inputs:
      optimization_level:
        description: 'Optimization level'
        required: true
        default: 'standard'
        type: choice
        options:
        - minimal
        - standard
        - aggressive
      include_debug:
        description: 'Include debug information'
        required: false
        default: false
        type: boolean

jobs:
  code-quality:
    name: üîç Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: üîç Checkout Repository
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: üßπ Install Code Quality Tools
      run: |
        npm init -y
        npm install --save-dev \
          eslint \
          jshint \
          htmlhint \
          stylelint \
          stylelint-config-standard \
          prettier
        
    - name: üîç JavaScript Analysis
      run: |
        echo "## üîç Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count files and lines
        JS_FILES=$(find . -name "*.js" | grep -v node_modules | wc -l)
        HTML_FILES=$(find . -name "*.html" | wc -l)
        CSS_FILES=$(find . -name "*.css" | wc -l)
        
        TOTAL_JS_LINES=$(find . -name "*.js" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        TOTAL_HTML_LINES=$(find . -name "*.html" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        TOTAL_CSS_LINES=$(find . -name "*.css" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        
        echo "### üìä Project Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- **JavaScript files:** $JS_FILES ($TOTAL_JS_LINES lines)" >> $GITHUB_STEP_SUMMARY
        echo "- **HTML files:** $HTML_FILES ($TOTAL_HTML_LINES lines)" >> $GITHUB_STEP_SUMMARY
        echo "- **CSS files:** $CSS_FILES ($TOTAL_CSS_LINES lines)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Game files analysis
        GAME_FILES=$(ls script-*.js 2>/dev/null | wc -l)
        echo "- **Game scripts:** $GAME_FILES juegos encontrados" >> $GITHUB_STEP_SUMMARY
        
        # List games
        if [ "$GAME_FILES" -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéÆ Juegos Detectados" >> $GITHUB_STEP_SUMMARY
          for game in script-*.js; do
            if [ -f "$game" ]; then
              GAME_NAME=$(echo "$game" | sed 's/script-//' | sed 's/.js//' | sed 's/-/ /g')
              GAME_LINES=$(wc -l < "$game")
              echo "- **$(echo $GAME_NAME | sed 's/.*/\L&/; s/[a-z]*/\u&/g')**: $GAME_LINES l√≠neas" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi
        
        # Basic syntax check
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üßπ Syntax Check" >> $GITHUB_STEP_SUMMARY
        
        SYNTAX_ERRORS=0
        for js_file in *.js script-*.js; do
          if [ -f "$js_file" ]; then
            if node -c "$js_file" 2>/dev/null; then
              echo "‚úÖ $js_file - Sintaxis correcta" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå $js_file - Error de sintaxis" >> $GITHUB_STEP_SUMMARY
              ((SYNTAX_ERRORS++))
            fi
          fi
        done
        
        if [ "$SYNTAX_ERRORS" -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **$SYNTAX_ERRORS archivos con errores de sintaxis encontrados**" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
    - name: üìä Performance Analysis
      run: |
        echo "### ‚ö° Performance Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # File size analysis
        TOTAL_SIZE=0
        for file in *.js *.html *.css script-*.js; do
          if [ -f "$file" ]; then
            SIZE=$(stat -c%s "$file")
            TOTAL_SIZE=$((TOTAL_SIZE + SIZE))
          fi
        done
        
        # Assets size
        ASSETS_SIZE=0
        if [ -d "assets" ]; then
          ASSETS_SIZE=$(du -sb assets 2>/dev/null | cut -f1 || echo "0")
        fi
        
        ICONS_SIZE=0
        if [ -d "icons" ]; then
          ICONS_SIZE=$(du -sb icons 2>/dev/null | cut -f1 || echo "0")
        fi
        
        TOTAL_PROJECT_SIZE=$((TOTAL_SIZE + ASSETS_SIZE + ICONS_SIZE))
        
        echo "- **C√≥digo fuente:** $(numfmt --to=iec $TOTAL_SIZE)" >> $GITHUB_STEP_SUMMARY
        echo "- **Assets:** $(numfmt --to=iec $ASSETS_SIZE)" >> $GITHUB_STEP_SUMMARY
        echo "- **Icons:** $(numfmt --to=iec $ICONS_SIZE)" >> $GITHUB_STEP_SUMMARY
        echo "- **Total proyecto:** $(numfmt --to=iec $TOTAL_PROJECT_SIZE)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Optimization potential
        echo "### üéØ Potential de Optimizaci√≥n" >> $GITHUB_STEP_SUMMARY
        ESTIMATED_SAVINGS=0
        
        # Check for large JavaScript files
        for js_file in *.js script-*.js; do
          if [ -f "$js_file" ]; then
            SIZE=$(stat -c%s "$js_file")
            if [ "$SIZE" -gt 10000 ]; then  # Files larger than 10KB
              ESTIMATED_MINIFIED=$((SIZE * 70 / 100))  # Estimate 30% reduction
              SAVINGS=$((SIZE - ESTIMATED_MINIFIED))
              ESTIMATED_SAVINGS=$((ESTIMATED_SAVINGS + SAVINGS))
              echo "- üìÑ **$js_file:** $(numfmt --to=iec $SIZE) ‚Üí ~$(numfmt --to=iec $ESTIMATED_MINIFIED) (ahorro: $(numfmt --to=iec $SAVINGS))" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        if [ "$ESTIMATED_SAVINGS" -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Ahorro estimado con minificaci√≥n:** ~$(numfmt --to=iec $ESTIMATED_SAVINGS)" >> $GITHUB_STEP_SUMMARY
        fi

  optimize-build:
    name: üéØ Optimize & Build
    needs: code-quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        optimization: [minimal, standard, aggressive]
        
    outputs:
      build_size_minimal: ${{ steps.build-info.outputs.size_minimal }}
      build_size_standard: ${{ steps.build-info.outputs.size_standard }}
      build_size_aggressive: ${{ steps.build-info.outputs.size_aggressive }}
    
    steps:
    - name: üîç Checkout Repository
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: üîß Install Build Tools
      run: |
        npm init -y
        npm install --save-dev \
          terser \
          clean-css-cli \
          html-minifier-terser \
          imagemin-cli \
          imagemin-pngquant \
          imagemin-mozjpeg \
          svgo
        
    - name: üéØ Optimize Assets
      run: |
        OPTIMIZATION_LEVEL="${{ matrix.optimization }}"
        echo "üéØ Optimizing with level: $OPTIMIZATION_LEVEL"
        
        # Create build directory
        mkdir -p "build/$OPTIMIZATION_LEVEL"
        
        # Copy source files first
        cp -r . "build/$OPTIMIZATION_LEVEL/"
        cd "build/$OPTIMIZATION_LEVEL"
        
        # Remove build artifacts and git files
        rm -rf build .git node_modules package.json package-lock.json .github
        
        case $OPTIMIZATION_LEVEL in
          "minimal")
            echo "üîπ Minimal optimization: Light compression, preserve readability"
            
            # Light JavaScript compression
            for js_file in *.js script-*.js; do
              if [ -f "$js_file" ]; then
                npx terser "$js_file" \
                  --compress sequences=false,dead_code=false \
                  --mangle false \
                  --format beautify=true,indent_level=2 \
                  -o "$js_file.tmp"
                mv "$js_file.tmp" "$js_file"
              fi
            done
            
            # Light CSS compression
            if [ -f "style.css" ]; then
              npx clean-css-cli -O1 --format beautify -o "style.css.tmp" "style.css"
              mv "style.css.tmp" "style.css"
            fi
            ;;
            
          "standard")
            echo "üî∏ Standard optimization: Good compression, readable output"
            
            # Standard JavaScript compression
            for js_file in *.js script-*.js; do
              if [ -f "$js_file" ]; then
                npx terser "$js_file" \
                  --compress \
                  --mangle reserved=['registerGame','gameCanvas'] \
                  --format semicolons=true \
                  -o "$js_file.tmp"
                mv "$js_file.tmp" "$js_file"
              fi
            done
            
            # Standard CSS compression
            if [ -f "style.css" ]; then
              npx clean-css-cli -O2 -o "style.css.tmp" "style.css"
              mv "style.css.tmp" "style.css"
            fi
            
            # Light HTML minification
            for html_file in *.html; do
              if [ -f "$html_file" ]; then
                npx html-minifier-terser \
                  --collapse-whitespace \
                  --remove-comments \
                  --remove-redundant-attributes \
                  -o "$html_file.tmp" "$html_file"
                mv "$html_file.tmp" "$html_file"
              fi
            done
            ;;
            
          "aggressive")
            echo "üî∫ Aggressive optimization: Maximum compression"
            
            # Maximum JavaScript compression
            for js_file in *.js script-*.js; do
              if [ -f "$js_file" ]; then
                npx terser "$js_file" \
                  --compress passes=3,pure_funcs=['console.log','console.warn'] \
                  --mangle \
                  --format ascii_only=true \
                  -o "$js_file.tmp"
                mv "$js_file.tmp" "$js_file"
              fi
            done
            
            # Maximum CSS compression
            if [ -f "style.css" ]; then
              npx clean-css-cli -O2 --format keep-breaks=false -o "style.css.tmp" "style.css"
              mv "style.css.tmp" "style.css"
            fi
            
            # Aggressive HTML minification
            for html_file in *.html; do
              if [ -f "$html_file" ]; then
                npx html-minifier-terser \
                  --collapse-whitespace \
                  --remove-comments \
                  --remove-optional-tags \
                  --remove-redundant-attributes \
                  --remove-script-type-attributes \
                  --remove-style-link-type-attributes \
                  --use-short-doctype \
                  --minify-css true \
                  --minify-js true \
                  -o "$html_file.tmp" "$html_file"
                mv "$html_file.tmp" "$html_file"
              fi
            done
            
            # Optimize images if they exist
            if [ -d "assets" ]; then
              find assets -name "*.png" -exec npx imagemin {} --plugin=pngquant --out-dir=assets \; 2>/dev/null || true
              find assets -name "*.jpg" -exec npx imagemin {} --plugin=mozjpeg --out-dir=assets \; 2>/dev/null || true
              find assets -name "*.svg" -exec npx svgo {} \; 2>/dev/null || true
            fi
            
            if [ -d "icons" ]; then
              find icons -name "*.png" -exec npx imagemin {} --plugin=pngquant --out-dir=icons \; 2>/dev/null || true
              find icons -name "*.svg" -exec npx svgo {} \; 2>/dev/null || true
            fi
            ;;
        esac
        
        # Remove build dependencies
        rm -rf node_modules package.json package-lock.json 2>/dev/null || true
        
        cd ../..
        
    - name: üìä Measure Build Size
      id: build-info
      run: |
        OPTIMIZATION_LEVEL="${{ matrix.optimization }}"
        BUILD_DIR="build/$OPTIMIZATION_LEVEL"
        
        if [ -d "$BUILD_DIR" ]; then
          BUILD_SIZE=$(du -sb "$BUILD_DIR" | cut -f1)
          BUILD_SIZE_HUMAN=$(numfmt --to=iec $BUILD_SIZE)
          
          echo "üìä Build size ($OPTIMIZATION_LEVEL): $BUILD_SIZE_HUMAN ($BUILD_SIZE bytes)"
          echo "size_$OPTIMIZATION_LEVEL=$BUILD_SIZE" >> $GITHUB_OUTPUT
          
          # Count files
          FILE_COUNT=$(find "$BUILD_DIR" -type f | wc -l)
          echo "üìÅ Files in build: $FILE_COUNT"
          
          # JavaScript size
          JS_SIZE=$(find "$BUILD_DIR" -name "*.js" -exec stat -c%s {} + 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          JS_SIZE_HUMAN=$(numfmt --to=iec $JS_SIZE)
          echo "üìÑ JavaScript size: $JS_SIZE_HUMAN"
          
          # HTML size
          HTML_SIZE=$(find "$BUILD_DIR" -name "*.html" -exec stat -c%s {} + 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          HTML_SIZE_HUMAN=$(numfmt --to=iec $HTML_SIZE)
          echo "üìÑ HTML size: $HTML_SIZE_HUMAN"
        fi
        
    - name: üéØ Create Optimized APK Package
      run: |
        OPTIMIZATION_LEVEL="${{ matrix.optimization }}"
        BUILD_DIR="build/$OPTIMIZATION_LEVEL"
        
        if [ -d "$BUILD_DIR" ]; then
          cd "$BUILD_DIR"
          
          # Create APK package
          zip -r "../Bruno_y_Vega_${OPTIMIZATION_LEVEL}.apk" . \
            -x "*.DS_Store" "*.git*" "node_modules/*" "*.tmp"
          
          cd ../..
          
          # Show APK size
          APK_SIZE=$(stat -c%s "build/Bruno_y_Vega_${OPTIMIZATION_LEVEL}.apk")
          APK_SIZE_HUMAN=$(numfmt --to=iec $APK_SIZE)
          echo "üì¶ APK size ($OPTIMIZATION_LEVEL): $APK_SIZE_HUMAN"
        fi
        
    - name: üì§ Upload Optimized Build
      uses: actions/upload-artifact@v4
      with:
        name: optimized-build-${{ matrix.optimization }}
        path: |
          build/Bruno_y_Vega_${{ matrix.optimization }}.apk
          build/${{ matrix.optimization }}/
        retention-days: 7

  compare-builds:
    name: üìä Compare Build Sizes
    needs: optimize-build
    runs-on: ubuntu-latest
    
    steps:
    - name: üìä Generate Build Comparison
      run: |
        echo "## üìä Build Optimization Comparison" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Optimization | Size | Reduction |" >> $GITHUB_STEP_SUMMARY
        echo "|--------------|------|-----------|" >> $GITHUB_STEP_SUMMARY
        
        # Get original size (approximate)
        ORIGINAL_ESTIMATED=1000000  # 1MB estimate
        
        # Process build sizes
        MINIMAL_SIZE="${{ needs.optimize-build.outputs.build_size_minimal }}"
        STANDARD_SIZE="${{ needs.optimize-build.outputs.build_size_standard }}"
        AGGRESSIVE_SIZE="${{ needs.optimize-build.outputs.build_size_aggressive }}"
        
        if [ ! -z "$MINIMAL_SIZE" ] && [ "$MINIMAL_SIZE" -gt 0 ]; then
          MINIMAL_HUMAN=$(numfmt --to=iec $MINIMAL_SIZE)
          MINIMAL_REDUCTION=$(( (ORIGINAL_ESTIMATED - MINIMAL_SIZE) * 100 / ORIGINAL_ESTIMATED ))
          echo "| Minimal | $MINIMAL_HUMAN | ${MINIMAL_REDUCTION}% |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ ! -z "$STANDARD_SIZE" ] && [ "$STANDARD_SIZE" -gt 0 ]; then
          STANDARD_HUMAN=$(numfmt --to=iec $STANDARD_SIZE)
          STANDARD_REDUCTION=$(( (ORIGINAL_ESTIMATED - STANDARD_SIZE) * 100 / ORIGINAL_ESTIMATED ))
          echo "| Standard | $STANDARD_HUMAN | ${STANDARD_REDUCTION}% |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ ! -z "$AGGRESSIVE_SIZE" ] && [ "$AGGRESSIVE_SIZE" -gt 0 ]; then
          AGGRESSIVE_HUMAN=$(numfmt --to=iec $AGGRESSIVE_SIZE)
          AGGRESSIVE_REDUCTION=$(( (ORIGINAL_ESTIMATED - AGGRESSIVE_SIZE) * 100 / ORIGINAL_ESTIMATED ))
          echo "| Aggressive | $AGGRESSIVE_HUMAN | ${AGGRESSIVE_REDUCTION}% |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üí° Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine best optimization level
        if [ ! -z "$AGGRESSIVE_SIZE" ] && [ "$AGGRESSIVE_SIZE" -gt 0 ]; then
          BEST_SIZE=$AGGRESSIVE_SIZE
          BEST_LEVEL="aggressive"
        elif [ ! -z "$STANDARD_SIZE" ] && [ "$STANDARD_SIZE" -gt 0 ]; then
          BEST_SIZE=$STANDARD_SIZE  
          BEST_LEVEL="standard"
        else
          BEST_SIZE=$MINIMAL_SIZE
          BEST_LEVEL="minimal"
        fi
        
        echo "üèÜ **Recommended optimization level:** $BEST_LEVEL" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ **Resulting APK size:** $(numfmt --to=iec $BEST_SIZE)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Optimization Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimal**: Preserves readability, light compression" >> $GITHUB_STEP_SUMMARY
        echo "- **Standard**: Good balance between size and readability" >> $GITHUB_STEP_SUMMARY  
        echo "- **Aggressive**: Maximum compression, smallest size" >> $GITHUB_STEP_SUMMARY

  generate-report:
    name: üìã Generate Build Report
    needs: [code-quality, optimize-build, compare-builds]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üîç Checkout Repository
      uses: actions/checkout@v4
      
    - name: üìã Generate Comprehensive Report
      run: |
        cat > BUILD_REPORT.md << EOF
        # üèóÔ∏è Build System Report
        
        **Generated:** $(date)  
        **Workflow:** ${{ github.workflow }}  
        **Trigger:** ${{ github.event_name }}  
        **Branch:** ${{ github.ref_name }}
        
        ## üìä Project Overview
        
        Este reporte contiene informaci√≥n detallada sobre el sistema de build 
        mejorado y las optimizaciones aplicadas al proyecto Bruno y Vega.
        
        ### üéØ Objetivos del Build System
        
        1. **Optimizaci√≥n autom√°tica** - Reducir tama√±o de archivos
        2. **M√∫ltiples niveles** - Minimal, Standard, Aggressive
        3. **Control de calidad** - Validaci√≥n de sintaxis y estructura
        4. **Automatizaci√≥n completa** - CI/CD integrado
        
        ## üîç An√°lisis de Calidad
        
        - ‚úÖ Verificaci√≥n de sintaxis JavaScript
        - üìä An√°lisis de tama√±o de archivos
        - üéÆ Detecci√≥n autom√°tica de juegos
        - ‚ö° Evaluaci√≥n de rendimiento
        
        ## üéØ Niveles de Optimizaci√≥n
        
        ### üîπ Minimal
        - Compresi√≥n ligera de JavaScript
        - Preserva legibilidad del c√≥digo
        - Ideal para desarrollo y debug
        
        ### üî∏ Standard (Recomendado)
        - Compresi√≥n balanceada
        - Mantiene nombres de funciones importantes
        - Buena relaci√≥n tama√±o/legibilidad
        
        ### üî∫ Aggressive
        - M√°xima compresi√≥n
        - Minificaci√≥n completa HTML/CSS/JS
        - Optimizaci√≥n de im√°genes
        - Menor tama√±o de APK
        
        ## üì¶ Artifacts Generados
        
        Cada build genera los siguientes artifacts:
        
        - \`Bruno_y_Vega_minimal.apk\` - Versi√≥n con optimizaci√≥n m√≠nima
        - \`Bruno_y_Vega_standard.apk\` - Versi√≥n balanceada (recomendada)
        - \`Bruno_y_Vega_aggressive.apk\` - Versi√≥n m√°s comprimida
        
        ## üöÄ Uso del Sistema
        
        ### Autom√°tico
        El sistema se ejecuta autom√°ticamente cuando:
        - Se hace push a la rama main
        - Se abre/actualiza un Pull Request
        - Se modifican archivos JS, HTML, CSS o assets
        
        ### Manual
        Puedes ejecutar el build manualmente con:
        - Nivel de optimizaci√≥n personalizado
        - Opci√≥n de incluir informaci√≥n de debug
        
        ## üìà M√©tricas y Monitoreo
        
        - **Tama√±o de archivos**: Tracking autom√°tico
        - **Potencial de optimizaci√≥n**: Estimaciones precisas
        - **Tiempo de build**: Optimizado para CI/CD
        - **Calidad de c√≥digo**: Validaci√≥n continua
        
        ## üîß Integraci√≥n con Workflows
        
        Este build system se integra con:
        - üè∑Ô∏è Sistema de versionado autom√°tico
        - üì± Generaci√≥n de APKs
        - üß™ Testing y validaci√≥n
        - ‚è™ Sistema de rollbacks
        
        ## üí° Pr√≥ximas Mejoras
        
        - [ ] An√°lisis est√°tico de c√≥digo m√°s profundo
        - [ ] Optimizaci√≥n de assets WebP
        - [ ] Tree shaking para JavaScript
        - [ ] Compresi√≥n Gzip/Brotli
        - [ ] Progressive Web App optimizations
        
        ---
        
        **ü§ñ Generado autom√°ticamente por GitHub Actions**
        EOF
        
    - name: üì§ Upload Build Report
      uses: actions/upload-artifact@v4
      with:
        name: build-system-report
        path: BUILD_REPORT.md
        retention-days: 30